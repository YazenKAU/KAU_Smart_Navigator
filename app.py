{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN5aM9TWKUtvXmRGeZOdHMr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ft9TI4V4nl0J","executionInfo":{"status":"ok","timestamp":1744477254674,"user_tz":-180,"elapsed":1574,"user":{"displayName":"Y A Z E N","userId":"12588991522333350457"}},"outputId":"32e9e571-bfcb-4f41-e8ff-7e07346f7754"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["!pip install streamlit folium pyngrok streamlit-folium"],"metadata":{"collapsed":true,"id":"r3Rq1Teun2BD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!ngrok config add-authtoken 2vdPeE0mEvpSmJh3tUi9iKQsXKV_5PwQToGQZRKxDWGLaSorn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dz61BEwGpdWx","executionInfo":{"status":"ok","timestamp":1744477221604,"user_tz":-180,"elapsed":529,"user":{"displayName":"Y A Z E N","userId":"12588991522333350457"}},"outputId":"75bb06e8-accd-42a6-8419-95fde6188593"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Authtoken saved to configuration file: /root/.config/ngrok/ngrok.yml\n"]}]},{"cell_type":"code","source":["%%writefile app.py\n","import streamlit as st\n","import pandas as pd\n","import folium\n","from streamlit_folium import st_folium\n","import os\n","from geopy.distance import geodesic\n","from PIL import Image\n","from time import sleep\n","\n","# === Paths ===\n","base = \"/content/drive/MyDrive/KAU_App\"\n","csv_folder = os.path.join(base, \"AttributeTable\")\n","img_folder = os.path.join(base, \"Images\", \"images\")\n","\n","# Load CSVs\n","buildings = pd.read_csv(os.path.join(csv_folder, \"Building_Points.csv\"))\n","routes = pd.read_csv(os.path.join(csv_folder, \"All_Solved_Routes.csv\"))\n","images = pd.read_csv(os.path.join(csv_folder, \"Mapillary_Images.csv\"))\n","\n","# Simulated GPS (you can update with real device GPS later)\n","user_lat = 21.4932\n","user_lon = 39.2465\n","\n","st.set_page_config(page_title=\"KAU Smart Navigator\", layout=\"wide\")\n","st.title(\"üìç KAU Smart Navigator\")\n","\n","# === \"My Location\" Toggle\n","show_location = st.checkbox(\"üìç Show My Location\")\n","\n","st.subheader(\"üß≠ Choose Start and Destination\")\n","col1, col2 = st.columns(2)\n","with col1:\n","    start = st.selectbox(\"Start Building\", buildings['Name'])\n","with col2:\n","    end = st.selectbox(\"Destination Building\", buildings['Name'])\n","\n","# === üîç Search Bar ===\n","st.markdown(\"### üîç Search for a Building\")\n","search_query = st.text_input(\"Type building name...\")\n","\n","if search_query:\n","    matches = buildings[buildings['Name'].str.contains(search_query, case=False)]\n","    if not matches.empty:\n","        st.success(f\"‚úÖ Found {len(matches)} result(s):\")\n","        for _, row in matches.iterrows():\n","            st.markdown(f\"- **{row['Name']}**\")\n","            st.map(pd.DataFrame({'lat': [row['Latitude']], 'lon': [row['Longitude']]}))\n","    else:\n","        st.warning(\"‚ö†Ô∏è No matching buildings found.\")\n","\n","# === Get Coordinates\n","from_row = buildings[buildings['Name'] == start].iloc[0]\n","to_row = buildings[buildings['Name'] == end].iloc[0]\n","from_id = from_row['OBJECTID']\n","to_id = to_row['OBJECTID']\n","\n","# === Map Center\n","map_center = [21.4926, 39.2468]\n","if show_location:\n","    map_center = [user_lat, user_lon]\n","\n","# === Map\n","m = folium.Map(location=map_center, zoom_start=16)\n","\n","# Add GPS Marker\n","if show_location:\n","    folium.CircleMarker(\n","        location=[user_lat, user_lon],\n","        radius=10,\n","        color=\"green\",\n","        fill=True,\n","        fill_opacity=0.9,\n","        popup=\"üìç You Are Here\"\n","    ).add_to(m)\n","\n","# Plot Buildings\n","for _, row in buildings.iterrows():\n","    folium.Marker(\n","        location=[row['Latitude'], row['Longitude']],\n","        popup=row['Name'],\n","        icon=folium.Icon(color=\"blue\", icon=\"university\", prefix=\"fa\")\n","    ).add_to(m)\n","\n","# === Draw Route\n","route_row = routes[\n","    ((routes['FromID'] == from_id) & (routes['ToID'] == to_id)) |\n","    ((routes['FromID'] == to_id) & (routes['ToID'] == from_id))\n","]\n","\n","image_matches = []\n","\n","if not route_row.empty:\n","    coords = [\n","        [from_row['Latitude'], from_row['Longitude']],\n","        [to_row['Latitude'], to_row['Longitude']]\n","    ]\n","    folium.PolyLine(\n","        locations=coords,\n","        color=\"red\",\n","        weight=5,\n","        tooltip=f\"Distance: {route_row['Length'].values[0]:.1f} m, Time: {route_row['TravelTime'].values[0]:.1f} min\"\n","    ).add_to(m)\n","    st.success(\"‚úÖ Route displayed!\")\n","\n","    # Filter photo points near route\n","    def is_nearby(lat, lon, threshold=0.05):\n","        pt = (lat, lon)\n","        return (\n","            geodesic(pt, coords[0]).meters < threshold * 1000 or\n","            geodesic(pt, coords[1]).meters < threshold * 1000\n","        )\n","\n","    image_matches = images[images.apply(lambda row: is_nearby(row['lat'], row['lon']), axis=1)]\n","    image_matches = image_matches.sort_values(by='id')\n","\n","else:\n","    st.warning(\"‚ö†Ô∏è No route found between selected buildings.\")\n","\n","# === Map Viewer\n","st.markdown(\"### üó∫Ô∏è Campus Map\")\n","st_data = st_folium(m, width=1200, height=500)\n","\n","# === Image Viewer with Auto-play\n","if not image_matches.empty:\n","    st.markdown(\"### üñºÔ∏è Visual Walkthrough\")\n","\n","    img_files = image_matches['photo_path'].apply(lambda p: os.path.basename(p)).tolist()\n","    img_paths = [os.path.join(img_folder, fname) for fname in img_files]\n","\n","    autoplay = st.checkbox(\"‚ñ∂Ô∏è Auto-play route slideshow\", value=False)\n","    speed = st.slider(\"‚è±Ô∏è Slide speed (seconds)\", 1, 10, 3)\n","\n","    if autoplay:\n","        img_slot = st.empty()\n","        for i, path in enumerate(img_paths):\n","            try:\n","                image = Image.open(path)\n","                img_slot.image(image, caption=f\"Image {i+1}/{len(img_paths)}\", use_column_width=True)\n","                sleep(speed)\n","            except:\n","                st.warning(f\"‚ö†Ô∏è Could not load: {path}\")\n","    else:\n","        idx = st.slider(\"Slide through images\", 0, len(img_paths)-1, 0)\n","        try:\n","            image = Image.open(img_paths[idx])\n","            st.image(image, caption=f\"Image {idx+1}/{len(img_paths)}\", use_column_width=True)\n","        except:\n","            st.error(f\"Could not load image: {img_paths[idx]}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hi8GhgyMrXKk","executionInfo":{"status":"ok","timestamp":1744477223288,"user_tz":-180,"elapsed":40,"user":{"displayName":"Y A Z E N","userId":"12588991522333350457"}},"outputId":"0168eaea-6a51-4d7a-863c-5590ab1d53a4"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting app.py\n"]}]},{"cell_type":"code","source":["!pkill -f streamlit\n","!pkill -f ngrok\n","from pyngrok import ngrok\n","!streamlit run app.py &>/content/logs.txt &\n","public_url = ngrok.connect(8501)\n","print(\"üåê App is Live:\", public_url)"],"metadata":{"id":"vodJ-mAEpmrG","executionInfo":{"status":"ok","timestamp":1744477228302,"user_tz":-180,"elapsed":1067,"user":{"displayName":"Y A Z E N","userId":"12588991522333350457"}},"outputId":"e9ea2442-6f7d-41a0-aaad-62e622e4da8b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["üåê App is Live: NgrokTunnel: \"https://6f40-34-171-51-139.ngrok-free.app\" -> \"http://localhost:8501\"\n"]}]}]}